testData$Resp <- rResp
remove(rResp)
testData$TrT <- as.factor(testData$TrT)
#Run the initial ANOVA test for any treatment difference(s)
initANOVA <- aov(Resp~TrT, data=testData)
#Get the ANOVA test result & run pairwise tests if appropriate
initPval <- summary(initANOVA)[[1]][["Pr(>F)"]][[1]]
if(initPval > alpha) {
testMat[i+1, ] <- rep(0, dim(testMat)[2])
}else{
testMat[i+1, 1] <- 1
matColCounter <- 2
#program 3 cases ...
if(testType !="hsd"){
sampGrpMeans <- aggregate(testData$Resp~testData$TrT, FUN=mean)[,2]
initANOVAMSE <- summary(initANOVA)[[1]][["Mean Sq"]][[2]]
initANOVAdf <- summary(initANOVA)[[1]][["Df"]][[2]]
if(testType=="lsd"){ al <- alpha }
else{al <- alpha/(nTrt*(nTrt-1)/2) }
for(j in 1:(length(sampGrpMeans)-1) ){
for(k in (j+1):length(sampGrpMeans) ){
LBD <- sampGrpMeans[k]-sampGrpMeans[j] - qt((1-al/2), df=initANOVAdf)*sqrt(initANOVAMSE*(2/numbReps))
UBD <- sampGrpMeans[k]-sampGrpMeans[j] + qt((1-al/2), df=initANOVAdf)*sqrt(initANOVAMSE*(2/numbReps))
if( LBD <0 && UBD>0 ){testMat[i+1, matColCounter] <- 0}
else{testMat[i+1, matColCounter] <- 1}
matColCounter <- matColCounter+1
}
}
}else{
caseHSD <- TukeyHSD(initANOVA, conf.level=(1-alpha))
testHSDPval <- as.vector(caseHSD$TrT[ ,"p adj"])
testMat[i+1, 2:dim(testMat)[2] ] <- as.numeric(testHSDPval < alpha)
}
}
}
####################################
####################################
#Summarize results for Type I error:  H0 is true but rejected -- columns with "0" in first row
NoDiffMat <- testMat[ ,testMat[1,]==0]
head(NoDiffMat)
##Check percentage of Type I error by column:
apply(NoDiffMat[-1,], 2, sum)/N
##Check percentage of Type I error overall:
sum(NoDiffMat[-1,])/(dim(NoDiffMat)[2]*N)
####################################
####################################
#Summarize results for Type II error:  Ho is not true but not rejected -- columns with "1" in first row
YesDiffMat <- testMat[ ,testMat[1,]==1]
head(YesDiffMat)
##Check percentage of Type II error by column:
(N-apply(YesDiffMat[-1, ], 2, sum) )/N
##Check percentage of Type II error overall
( (dim(YesDiffMat)[2]*N) - sum(YesDiffMat[-1,]))/(dim(YesDiffMat)[2]*N)
####################################
##Multiple Testing and Significance Level Simulations##
###################################
#Parameters to change in simulation
trtMeans <- c(1,1,1,2) #Vector of true treatment means -- need at least 2
numbReps <- 4            #Number of replicates per treatment
trtVar <- 0.1            #Within group variance for treatments
alpha <- 0.05            #Test significance level
N <- 1000                #Number of Monte Carlo samples
testType <- "hsd" #Choose one of "bonferroni", "hsd", "lsd"
set.seed(801205834)         #Set a seed for replicable results (use same seed to compare
#  procedure-to-procedure, your seed is your student ID #)
###################################
###################################
#Generate the matrix to store test results in
# - 0 implies no difference in truth, 1 implies difference in truth
nTrt  <- length(trtMeans)                                   #Number of treatments
testMat <- matrix( NA, nrow=N+1, ncol=(nTrt*(nTrt-1)/2+1) ) #matrix to load results in
colnames(testMat) <- colnames(testMat, do.NULL=FALSE)
rownames(testMat) <- rownames(testMat, do.NULL=FALSE)
rownames(testMat)[1] <- "Truth"                             #Truth in first row
colnames(testMat)[1] <- "ANOVA"                             #name column for ANOVA test
matColCounter <- 2                                          #to ease column naming in loop
if(length(unique(trtMeans))==1){
testMat[1, ] <- rep(0, dim(testMat)[2])
}else{ testMat[1,1] <- 1}
for(i in 1:(nTrt-1) ){
for(j in (i+1):nTrt) {
colnames(testMat)[matColCounter] <- paste(i, "and", j) #name column for pair
if(trtMeans[i]==trtMeans[j]){ testMat[1, matColCounter] <- 0 }
else{ testMat[1, matColCounter] <- 1 }
matColCounter <- matColCounter+1
}
}
remove(matColCounter)
####################################
####################################
#Simulate Data and run tests
for(i in 1:N){
testData <- data.frame(TrT=rep(1:nTrt, each=numbReps))
rResp <- c()
for(j in 1:nTrt){
rResp <- c(rResp, rnorm(numbReps, mean=trtMeans[j], sd=sqrt(trtVar)) )
}
testData$Resp <- rResp
remove(rResp)
testData$TrT <- as.factor(testData$TrT)
#Run the initial ANOVA test for any treatment difference(s)
initANOVA <- aov(Resp~TrT, data=testData)
#Get the ANOVA test result & run pairwise tests if appropriate
initPval <- summary(initANOVA)[[1]][["Pr(>F)"]][[1]]
if(initPval > alpha) {
testMat[i+1, ] <- rep(0, dim(testMat)[2])
}else{
testMat[i+1, 1] <- 1
matColCounter <- 2
#program 3 cases ...
if(testType !="hsd"){
sampGrpMeans <- aggregate(testData$Resp~testData$TrT, FUN=mean)[,2]
initANOVAMSE <- summary(initANOVA)[[1]][["Mean Sq"]][[2]]
initANOVAdf <- summary(initANOVA)[[1]][["Df"]][[2]]
if(testType=="lsd"){ al <- alpha }
else{al <- alpha/(nTrt*(nTrt-1)/2) }
for(j in 1:(length(sampGrpMeans)-1) ){
for(k in (j+1):length(sampGrpMeans) ){
LBD <- sampGrpMeans[k]-sampGrpMeans[j] - qt((1-al/2), df=initANOVAdf)*sqrt(initANOVAMSE*(2/numbReps))
UBD <- sampGrpMeans[k]-sampGrpMeans[j] + qt((1-al/2), df=initANOVAdf)*sqrt(initANOVAMSE*(2/numbReps))
if( LBD <0 && UBD>0 ){testMat[i+1, matColCounter] <- 0}
else{testMat[i+1, matColCounter] <- 1}
matColCounter <- matColCounter+1
}
}
}else{
caseHSD <- TukeyHSD(initANOVA, conf.level=(1-alpha))
testHSDPval <- as.vector(caseHSD$TrT[ ,"p adj"])
testMat[i+1, 2:dim(testMat)[2] ] <- as.numeric(testHSDPval < alpha)
}
}
}
####################################
####################################
#Summarize results for Type I error:  H0 is true but rejected -- columns with "0" in first row
NoDiffMat <- testMat[ ,testMat[1,]==0]
head(NoDiffMat)
##Check percentage of Type I error by column:
apply(NoDiffMat[-1,], 2, sum)/N
##Check percentage of Type I error overall:
sum(NoDiffMat[-1,])/(dim(NoDiffMat)[2]*N)
####################################
####################################
#Summarize results for Type II error:  Ho is not true but not rejected -- columns with "1" in first row
YesDiffMat <- testMat[ ,testMat[1,]==1]
head(YesDiffMat)
##Check percentage of Type II error by column:
(N-apply(YesDiffMat[-1, ], 2, sum) )/N
##Check percentage of Type II error overall
( (dim(YesDiffMat)[2]*N) - sum(YesDiffMat[-1,]))/(dim(YesDiffMat)[2]*N)
####################################
##Multiple Testing and Significance Level Simulations##
###################################
#Parameters to change in simulation
trtMeans <- c(1,1,1,2,3) #Vector of true treatment means -- need at least 2
numbReps <- 4            #Number of replicates per treatment
trtVar <- 0.1            #Within group variance for treatments
alpha <- 0.1            #Test significance level
N <- 1000                #Number of Monte Carlo samples
testType <- "bonferroni" #Choose one of "bonferroni", "hsd", "lsd"
set.seed(801205834)         #Set a seed for replicable results (use same seed to compare
#  procedure-to-procedure, your seed is your student ID #)
###################################
###################################
#Generate the matrix to store test results in
# - 0 implies no difference in truth, 1 implies difference in truth
nTrt  <- length(trtMeans)                                   #Number of treatments
testMat <- matrix( NA, nrow=N+1, ncol=(nTrt*(nTrt-1)/2+1) ) #matrix to load results in
colnames(testMat) <- colnames(testMat, do.NULL=FALSE)
rownames(testMat) <- rownames(testMat, do.NULL=FALSE)
rownames(testMat)[1] <- "Truth"                             #Truth in first row
colnames(testMat)[1] <- "ANOVA"                             #name column for ANOVA test
matColCounter <- 2                                          #to ease column naming in loop
if(length(unique(trtMeans))==1){
testMat[1, ] <- rep(0, dim(testMat)[2])
}else{ testMat[1,1] <- 1}
for(i in 1:(nTrt-1) ){
for(j in (i+1):nTrt) {
colnames(testMat)[matColCounter] <- paste(i, "and", j) #name column for pair
if(trtMeans[i]==trtMeans[j]){ testMat[1, matColCounter] <- 0 }
else{ testMat[1, matColCounter] <- 1 }
matColCounter <- matColCounter+1
}
}
remove(matColCounter)
####################################
####################################
#Simulate Data and run tests
for(i in 1:N){
testData <- data.frame(TrT=rep(1:nTrt, each=numbReps))
rResp <- c()
for(j in 1:nTrt){
rResp <- c(rResp, rnorm(numbReps, mean=trtMeans[j], sd=sqrt(trtVar)) )
}
testData$Resp <- rResp
remove(rResp)
testData$TrT <- as.factor(testData$TrT)
#Run the initial ANOVA test for any treatment difference(s)
initANOVA <- aov(Resp~TrT, data=testData)
#Get the ANOVA test result & run pairwise tests if appropriate
initPval <- summary(initANOVA)[[1]][["Pr(>F)"]][[1]]
if(initPval > alpha) {
testMat[i+1, ] <- rep(0, dim(testMat)[2])
}else{
testMat[i+1, 1] <- 1
matColCounter <- 2
#program 3 cases ...
if(testType !="hsd"){
sampGrpMeans <- aggregate(testData$Resp~testData$TrT, FUN=mean)[,2]
initANOVAMSE <- summary(initANOVA)[[1]][["Mean Sq"]][[2]]
initANOVAdf <- summary(initANOVA)[[1]][["Df"]][[2]]
if(testType=="lsd"){ al <- alpha }
else{al <- alpha/(nTrt*(nTrt-1)/2) }
for(j in 1:(length(sampGrpMeans)-1) ){
for(k in (j+1):length(sampGrpMeans) ){
LBD <- sampGrpMeans[k]-sampGrpMeans[j] - qt((1-al/2), df=initANOVAdf)*sqrt(initANOVAMSE*(2/numbReps))
UBD <- sampGrpMeans[k]-sampGrpMeans[j] + qt((1-al/2), df=initANOVAdf)*sqrt(initANOVAMSE*(2/numbReps))
if( LBD <0 && UBD>0 ){testMat[i+1, matColCounter] <- 0}
else{testMat[i+1, matColCounter] <- 1}
matColCounter <- matColCounter+1
}
}
}else{
caseHSD <- TukeyHSD(initANOVA, conf.level=(1-alpha))
testHSDPval <- as.vector(caseHSD$TrT[ ,"p adj"])
testMat[i+1, 2:dim(testMat)[2] ] <- as.numeric(testHSDPval < alpha)
}
}
}
####################################
####################################
#Summarize results for Type I error:  H0 is true but rejected -- columns with "0" in first row
NoDiffMat <- testMat[ ,testMat[1,]==0]
head(NoDiffMat)
##Check percentage of Type I error by column:
apply(NoDiffMat[-1,], 2, sum)/N
##Check percentage of Type I error overall:
sum(NoDiffMat[-1,])/(dim(NoDiffMat)[2]*N)
####################################
####################################
#Summarize results for Type II error:  Ho is not true but not rejected -- columns with "1" in first row
YesDiffMat <- testMat[ ,testMat[1,]==1]
head(YesDiffMat)
##Check percentage of Type II error by column:
(N-apply(YesDiffMat[-1, ], 2, sum) )/N
##Check percentage of Type II error overall
( (dim(YesDiffMat)[2]*N) - sum(YesDiffMat[-1,]))/(dim(YesDiffMat)[2]*N)
####################################
##Multiple Testing and Significance Level Simulations##
###################################
#Parameters to change in simulation
trtMeans <- c(1,1,1,2,3) #Vector of true treatment means -- need at least 2
numbReps <- 4            #Number of replicates per treatment
trtVar <- 0.1            #Within group variance for treatments
alpha <- 0.1            #Test significance level
N <- 1000                #Number of Monte Carlo samples
testType <- "lsd" #Choose one of "bonferroni", "hsd", "lsd"
set.seed(801205834)         #Set a seed for replicable results (use same seed to compare
#  procedure-to-procedure, your seed is your student ID #)
###################################
###################################
#Generate the matrix to store test results in
# - 0 implies no difference in truth, 1 implies difference in truth
nTrt  <- length(trtMeans)                                   #Number of treatments
testMat <- matrix( NA, nrow=N+1, ncol=(nTrt*(nTrt-1)/2+1) ) #matrix to load results in
colnames(testMat) <- colnames(testMat, do.NULL=FALSE)
rownames(testMat) <- rownames(testMat, do.NULL=FALSE)
rownames(testMat)[1] <- "Truth"                             #Truth in first row
colnames(testMat)[1] <- "ANOVA"                             #name column for ANOVA test
matColCounter <- 2                                          #to ease column naming in loop
if(length(unique(trtMeans))==1){
testMat[1, ] <- rep(0, dim(testMat)[2])
}else{ testMat[1,1] <- 1}
for(i in 1:(nTrt-1) ){
for(j in (i+1):nTrt) {
colnames(testMat)[matColCounter] <- paste(i, "and", j) #name column for pair
if(trtMeans[i]==trtMeans[j]){ testMat[1, matColCounter] <- 0 }
else{ testMat[1, matColCounter] <- 1 }
matColCounter <- matColCounter+1
}
}
remove(matColCounter)
####################################
####################################
#Simulate Data and run tests
for(i in 1:N){
testData <- data.frame(TrT=rep(1:nTrt, each=numbReps))
rResp <- c()
for(j in 1:nTrt){
rResp <- c(rResp, rnorm(numbReps, mean=trtMeans[j], sd=sqrt(trtVar)) )
}
testData$Resp <- rResp
remove(rResp)
testData$TrT <- as.factor(testData$TrT)
#Run the initial ANOVA test for any treatment difference(s)
initANOVA <- aov(Resp~TrT, data=testData)
#Get the ANOVA test result & run pairwise tests if appropriate
initPval <- summary(initANOVA)[[1]][["Pr(>F)"]][[1]]
if(initPval > alpha) {
testMat[i+1, ] <- rep(0, dim(testMat)[2])
}else{
testMat[i+1, 1] <- 1
matColCounter <- 2
#program 3 cases ...
if(testType !="hsd"){
sampGrpMeans <- aggregate(testData$Resp~testData$TrT, FUN=mean)[,2]
initANOVAMSE <- summary(initANOVA)[[1]][["Mean Sq"]][[2]]
initANOVAdf <- summary(initANOVA)[[1]][["Df"]][[2]]
if(testType=="lsd"){ al <- alpha }
else{al <- alpha/(nTrt*(nTrt-1)/2) }
for(j in 1:(length(sampGrpMeans)-1) ){
for(k in (j+1):length(sampGrpMeans) ){
LBD <- sampGrpMeans[k]-sampGrpMeans[j] - qt((1-al/2), df=initANOVAdf)*sqrt(initANOVAMSE*(2/numbReps))
UBD <- sampGrpMeans[k]-sampGrpMeans[j] + qt((1-al/2), df=initANOVAdf)*sqrt(initANOVAMSE*(2/numbReps))
if( LBD <0 && UBD>0 ){testMat[i+1, matColCounter] <- 0}
else{testMat[i+1, matColCounter] <- 1}
matColCounter <- matColCounter+1
}
}
}else{
caseHSD <- TukeyHSD(initANOVA, conf.level=(1-alpha))
testHSDPval <- as.vector(caseHSD$TrT[ ,"p adj"])
testMat[i+1, 2:dim(testMat)[2] ] <- as.numeric(testHSDPval < alpha)
}
}
}
####################################
####################################
#Summarize results for Type I error:  H0 is true but rejected -- columns with "0" in first row
NoDiffMat <- testMat[ ,testMat[1,]==0]
head(NoDiffMat)
##Check percentage of Type I error by column:
apply(NoDiffMat[-1,], 2, sum)/N
##Check percentage of Type I error overall:
sum(NoDiffMat[-1,])/(dim(NoDiffMat)[2]*N)
####################################
####################################
#Summarize results for Type II error:  Ho is not true but not rejected -- columns with "1" in first row
YesDiffMat <- testMat[ ,testMat[1,]==1]
head(YesDiffMat)
##Check percentage of Type II error by column:
(N-apply(YesDiffMat[-1, ], 2, sum) )/N
##Check percentage of Type II error overall
( (dim(YesDiffMat)[2]*N) - sum(YesDiffMat[-1,]))/(dim(YesDiffMat)[2]*N)
####################################
##Multiple Testing and Significance Level Simulations##
###################################
#Parameters to change in simulation
trtMeans <- c(1,1,1,2,3) #Vector of true treatment means -- need at least 2
numbReps <- 4            #Number of replicates per treatment
trtVar <- 0.1            #Within group variance for treatments
alpha <- 0.1            #Test significance level
N <- 1000                #Number of Monte Carlo samples
testType <- "hsd" #Choose one of "bonferroni", "hsd", "lsd"
set.seed(801205834)         #Set a seed for replicable results (use same seed to compare
#  procedure-to-procedure, your seed is your student ID #)
###################################
###################################
#Generate the matrix to store test results in
# - 0 implies no difference in truth, 1 implies difference in truth
nTrt  <- length(trtMeans)                                   #Number of treatments
testMat <- matrix( NA, nrow=N+1, ncol=(nTrt*(nTrt-1)/2+1) ) #matrix to load results in
colnames(testMat) <- colnames(testMat, do.NULL=FALSE)
rownames(testMat) <- rownames(testMat, do.NULL=FALSE)
rownames(testMat)[1] <- "Truth"                             #Truth in first row
colnames(testMat)[1] <- "ANOVA"                             #name column for ANOVA test
matColCounter <- 2                                          #to ease column naming in loop
if(length(unique(trtMeans))==1){
testMat[1, ] <- rep(0, dim(testMat)[2])
}else{ testMat[1,1] <- 1}
for(i in 1:(nTrt-1) ){
for(j in (i+1):nTrt) {
colnames(testMat)[matColCounter] <- paste(i, "and", j) #name column for pair
if(trtMeans[i]==trtMeans[j]){ testMat[1, matColCounter] <- 0 }
else{ testMat[1, matColCounter] <- 1 }
matColCounter <- matColCounter+1
}
}
remove(matColCounter)
####################################
####################################
#Simulate Data and run tests
for(i in 1:N){
testData <- data.frame(TrT=rep(1:nTrt, each=numbReps))
rResp <- c()
for(j in 1:nTrt){
rResp <- c(rResp, rnorm(numbReps, mean=trtMeans[j], sd=sqrt(trtVar)) )
}
testData$Resp <- rResp
remove(rResp)
testData$TrT <- as.factor(testData$TrT)
#Run the initial ANOVA test for any treatment difference(s)
initANOVA <- aov(Resp~TrT, data=testData)
#Get the ANOVA test result & run pairwise tests if appropriate
initPval <- summary(initANOVA)[[1]][["Pr(>F)"]][[1]]
if(initPval > alpha) {
testMat[i+1, ] <- rep(0, dim(testMat)[2])
}else{
testMat[i+1, 1] <- 1
matColCounter <- 2
#program 3 cases ...
if(testType !="hsd"){
sampGrpMeans <- aggregate(testData$Resp~testData$TrT, FUN=mean)[,2]
initANOVAMSE <- summary(initANOVA)[[1]][["Mean Sq"]][[2]]
initANOVAdf <- summary(initANOVA)[[1]][["Df"]][[2]]
if(testType=="lsd"){ al <- alpha }
else{al <- alpha/(nTrt*(nTrt-1)/2) }
for(j in 1:(length(sampGrpMeans)-1) ){
for(k in (j+1):length(sampGrpMeans) ){
LBD <- sampGrpMeans[k]-sampGrpMeans[j] - qt((1-al/2), df=initANOVAdf)*sqrt(initANOVAMSE*(2/numbReps))
UBD <- sampGrpMeans[k]-sampGrpMeans[j] + qt((1-al/2), df=initANOVAdf)*sqrt(initANOVAMSE*(2/numbReps))
if( LBD <0 && UBD>0 ){testMat[i+1, matColCounter] <- 0}
else{testMat[i+1, matColCounter] <- 1}
matColCounter <- matColCounter+1
}
}
}else{
caseHSD <- TukeyHSD(initANOVA, conf.level=(1-alpha))
testHSDPval <- as.vector(caseHSD$TrT[ ,"p adj"])
testMat[i+1, 2:dim(testMat)[2] ] <- as.numeric(testHSDPval < alpha)
}
}
}
####################################
####################################
#Summarize results for Type I error:  H0 is true but rejected -- columns with "0" in first row
NoDiffMat <- testMat[ ,testMat[1,]==0]
head(NoDiffMat)
##Check percentage of Type I error by column:
apply(NoDiffMat[-1,], 2, sum)/N
##Check percentage of Type I error overall:
sum(NoDiffMat[-1,])/(dim(NoDiffMat)[2]*N)
####################################
####################################
#Summarize results for Type II error:  Ho is not true but not rejected -- columns with "1" in first row
YesDiffMat <- testMat[ ,testMat[1,]==1]
head(YesDiffMat)
##Check percentage of Type II error by column:
(N-apply(YesDiffMat[-1, ], 2, sum) )/N
##Check percentage of Type II error overall
( (dim(YesDiffMat)[2]*N) - sum(YesDiffMat[-1,]))/(dim(YesDiffMat)[2]*N)
####################################
MA1 <- arima.sim(list(order=c(0,0,1),ma=.5),n=100)
plot(MA1)
MA1 <- arima.sim(list(order=c(0,0,1),ma=1.1),n=100)
plot(MA1)
MA1 <- arima.sim(list(order=c(0,0,1),ma=2),n=100)
plot(MA1)
MA1 <- arima.sim(list(order=c(0,0,1),ma=100),n=100)
plot(MA1)
MA1 <- arima.sim(list(order=c(0,0,1),ma=10),n=100)
plot(MA1)
MA1 <- arima.sim(list(order=c(0,0,1),ma=1),n=100)
plot(MA1)
MA1 <- arima.sim(list(order=c(0,0,1),ma=-0.5),n=100)
plot(MA1)
str(MA!)
str(MA1)
MA1[1]
MA <- arima.sim(list(order=c(0,0,1),ma=-0.5),n=100)
plot(MA)
acf <- MA/MA[0]
MA/1
MA[1]
MA/(MA[1])
acf <- MA/(MA[0])
MA/(MA[0])
MA
MA/(MA[0])
MA/(MA[1])
acf <- MA/(MA[1])
plot(acf)
acf <- MA/(MA[1])
plot(acf,type="h")
for (i in 1:n){}
for (i in 1:n){
print(1/sqrt(n))}
for (n in 1:10){
print(1/sqrt(n)-1/n)}
for (n in 1:100){
print(1/sqrt(n)-1/n)}
print(sum(1/sqrt(n)-1/n))}
for (n in 1:100){print(sum(1/sqrt(n)-1/n))}
for (n in 1:1000){print(sum(1/sqrt(n)-1/n))}
for (n in 1:1000){print(sum(1/sqrt(n)-1/n))}
for (n in 1:1000){
k <- seq(1,n)
print(sim(1/sqrt(k)))}
print(sum(1/sqrt(k)))for (n in 1:1000){
+ k <- seq(1,n)
print(sum(1/sqrt(k)))for (n in 1:1000){
k <- seq(1,n)
library(shiny)
require(openxlsx)
library(ggplot2)
library(plyr)
library(dplyr)
library(MASS)
library(scales)
?read.xlsx
library(xlsx)
?xlsx
?read.xlsx
?read.xlsx2
library(readxl)
?readxl::read_excel
setwd("~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/LDA Plot")
readxl::read_excel("Sample Data - Rose Student.xlsx")
df <-readxl::read_excel("Sample Data - Rose Student.xlsx")
head(df)
unique(df$Q51Brand_a)
library(readxl)
